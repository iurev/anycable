module WEBrick
  NullReader: untyped

  def self.read: (*untyped args) -> nil

  alias self.gets self.read

  FakeProxyURI: untyped

  def self.method_missing: (untyped meth, *untyped args) -> (nil | untyped)

  class HTTPProxyServer < HTTPServer
    def initialize: (?::Hash[untyped, untyped] config, ?untyped default) -> void

    # :stopdoc:
    def service: (untyped req, untyped res) -> untyped

    def proxy_auth: (untyped req, untyped res) -> untyped

    def proxy_uri: (untyped req, untyped res) -> untyped

    def proxy_service: (untyped req, untyped res) -> untyped

    def do_CONNECT: (untyped req, untyped res) -> untyped

    def do_GET: (untyped req, untyped res) -> untyped

    def do_HEAD: (untyped req, untyped res) -> untyped

    def do_POST: (untyped req, untyped res) -> untyped

    def do_OPTIONS: (untyped req, untyped res) -> untyped

    private

    # Some header fields should not be transferred.
    HopByHop: ::Array["connection" | "keep-alive" | "proxy-authenticate" | "upgrade" | "proxy-authorization" | "te" | "trailers" | "transfer-encoding"]

    ShouldNotTransfer: ::Array["set-cookie" | "proxy-connection"]

    def split_field: (untyped f) -> (untyped | ::Array[untyped])

    def choose_header: (untyped src, untyped dst) -> untyped

    # Net::HTTP is stupid about the multiple header fields.
    # Here is workaround:
    def set_cookie: (untyped src, untyped dst) -> (untyped | nil)

    def set_via: (untyped h) -> (untyped | nil)

    def setup_proxy_header: (untyped req, untyped res) -> untyped

    def setup_upstream_proxy_authentication: (untyped req, untyped res, untyped header) -> untyped

    def create_net_http: (untyped uri, untyped upstream) -> untyped

    def perform_proxy_request: (untyped req, untyped res, untyped req_class, ?untyped? body_stream) -> untyped
  end
end
