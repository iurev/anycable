# GRPC contains the General RPC module.
module GRPC
  # RpcDesc is a Descriptor of an RPC method.
  class RpcDesc
    include Core::StatusCodes

    # Used to wrap a message class to indicate that it needs to be streamed.
    class Stream
      attr_accessor type: untyped

      def initialize: (untyped type) -> void
    end

    # @return [Proc] { |instance| marshalled(instance) }
    def marshal_proc: () -> untyped

    # @param [:input, :output] target determines whether to produce the an
    #                          unmarshal Proc for the rpc input parameter or
    #                          its output parameter
    #
    # @return [Proc] An unmarshal proc { |marshalled(instance)| instance }
    def unmarshal_proc: (untyped target) -> untyped

    def handle_request_response: (untyped active_call, untyped mth, untyped inter_ctx) -> untyped

    def handle_client_streamer: (untyped active_call, untyped mth, untyped inter_ctx) -> untyped

    def handle_server_streamer: (untyped active_call, untyped mth, untyped inter_ctx) -> untyped

    #
    # @param [GRPC::ActiveCall] active_call
    # @param [Method] mth
    # @param [Array<GRPC::InterceptionContext>] inter_ctx
    #
    def handle_bidi_streamer: (untyped active_call, untyped mth, untyped inter_ctx) -> untyped

    #
    # @param [GRPC::ActiveCall] active_call The current active call object
    #   for the request
    # @param [Method] mth The current RPC method being called
    # @param [GRPC::InterceptionContext] inter_ctx The interception context
    #   being executed
    #
    def run_server_method: (untyped active_call, untyped mth, ?untyped inter_ctx) -> untyped

    def assert_arity_matches: (untyped mth) -> (untyped | nil)

    def request_response?: () -> untyped

    def client_streamer?: () -> untyped

    def server_streamer?: () -> untyped

    def bidi_streamer?: () -> untyped

    def arity_error: (untyped mth, untyped want, untyped msg) -> ::String

    def send_status: (untyped active_client, untyped code, untyped details, ?::Hash[untyped, untyped] metadata) -> untyped
  end
end
