# GRPC contains the General RPC module.
module GRPC
  # The BiDiCall class orchestrates execution of a BiDi stream on a client or
  # server.
  class BidiCall
    include Core::StatusCodes

    include Core::TimeConsts

    # Creates a BidiCall.
    #
    # BidiCall should only be created after a call is accepted.  That means
    # different things on a client and a server.  On the client, the call is
    # accepted after call.invoke. On the server, this is after call.accept.
    #
    # #initialize cannot determine if the call is accepted or not; so if a
    # call that's not accepted is used here, the error won't be visible until
    # the BidiCall#run is called.
    #
    # deadline is the absolute deadline for the call.
    #
    # @param call [Call] the call used by the ActiveCall
    # @param marshal [Function] f(obj)->string that marshal requests
    # @param unmarshal [Function] f(string)->obj that unmarshals responses
    # @param metadata_received [true|false] indicates if metadata has already
    #     been received. Should always be true for server calls
    def initialize: (untyped call, untyped marshal, untyped unmarshal, ?metadata_received: bool, ?req_view: untyped?) -> void

    # Begins orchestration of the Bidi stream for a client sending requests.
    #
    # The method either returns an Enumerator of the responses, or accepts a
    # block that can be invoked with each response.
    #
    # @param requests the Enumerable of requests to send
    # @param set_input_stream_done [Proc] called back when we're done
    #   reading the input stream
    # @param set_output_stream_done [Proc] called back when we're done
    #   sending data on the output stream
    # @return an Enumerator of requests to yield
    def run_on_client: (untyped requests, untyped set_input_stream_done, untyped set_output_stream_done) { () -> untyped } -> untyped

    # Begins orchestration of the Bidi stream for a server generating replies.
    #
    # N.B. gen_each_reply is a func(Enumerable<Requests>)
    #
    # It takes an enumerable of requests as an arg, in case there is a
    # relationship between the stream of requests and the stream of replies.
    #
    # This does not mean that must necessarily be one.  E.g, the replies
    # produced by gen_each_reply could ignore the received_msgs
    #
    # @param [Proc] gen_each_reply generates the BiDi stream replies.
    # @param [Enumerable] requests The enumerable of requests to run
    def run_on_server: (untyped gen_each_reply, untyped requests) -> untyped

    #
    # Read the next stream iteration
    #
    # @param [Proc] finalize_stream callback to call when the reads have been
    #   completely read through.
    # @param [Boolean] is_client If this is a client or server request
    #
    def read_next_loop: (untyped finalize_stream, ?bool is_client) -> untyped

    private

    END_OF_READS: :end_of_reads

    END_OF_WRITES: :end_of_writes

    # performs a read using @call.run_batch, ensures metadata is set up
    def read_using_run_batch: () -> untyped

    # set_output_stream_done is relevant on client-side
    # rubocop:disable Metrics/PerceivedComplexity
    def write_loop: (untyped requests, ?is_client: bool, ?set_output_stream_done: untyped?) -> untyped

    # Provides an enumerator that yields results of remote reads
    def read_loop: (untyped set_input_stream_done, ?is_client: bool) ?{ (untyped) -> untyped } -> untyped
  end
end
